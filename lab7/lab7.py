import math
import time

def baby_step_giant_step(g, h, q):
    """
    –ó–Ω–∞—Ö–æ–¥–∏—Ç—å x —Ç–∞–∫–µ, —â–æ g^x mod q = h
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∞–ª–≥–æ—Ä–∏—Ç–º Baby-step Giant-step (–®–µ–Ω–∫—Å–∞)
    
    Args:
        g: –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        h: —Ä–µ–∑—É–ª—å—Ç–∞—Ç g^x mod q
        q: –ø—Ä–æ—Å—Ç–µ —á–∏—Å–ª–æ (–º–æ–¥—É–ª—å)
    
    Returns:
        x: —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á (–¥–∏—Å–∫—Ä–µ—Ç–Ω–∏–π –ª–æ–≥–∞—Ä–∏—Ñ–º)
    """
    print(f"  ‚Üí –û–±—á–∏—Å–ª—é—î–º–æ m = ‚åà‚àö{q}‚åâ = {math.isqrt(q - 1) + 1}")
    m = math.isqrt(q - 1) + 1
    
    # Baby step
    print(f"  ‚Üí Baby step: —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é g^j mod q –¥–ª—è j = 0..{m-1}")
    baby_steps = {}
    power = 1
    for j in range(m):
        if power not in baby_steps:
            baby_steps[power] = j
        power = (power * g) % q
    print(f"  ‚Üí –¢–∞–±–ª–∏—Ü—è —Å—Ç–≤–æ—Ä–µ–Ω–∞, –∑–∞–ø–∏—Å—ñ–≤: {len(baby_steps)}")
    
    # –û–±—á–∏—Å–ª—é—î–º–æ g^(-m) mod q
    g_m = pow(g, m, q)
    g_m_inv = pow(g_m, q - 2, q)
    print(f"  ‚Üí Giant step: g^(-{m}) mod {q} = {g_m_inv}")
    
    # Giant step
    gamma = h
    for i in range(m):
        if gamma in baby_steps:
            j = baby_steps[gamma]
            x = i * m + j
            if pow(g, x, q) == h:
                print(f"  ‚úì –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—ó {i}: x = {i}*{m} + {j} = {x}")
                return x
        gamma = (gamma * g_m_inv) % q
    
    return None


def brute_force_attack(g, h, q, max_iterations=1000000):
    """
    –ü—Ä–æ—Å—Ç–∞ –∞—Ç–∞–∫–∞ –ø–µ—Ä–µ–±–æ—Ä–æ–º (–¥–ª—è –º–∞–ª–∏—Ö –∑–Ω–∞—á–µ–Ω—å X)
    """
    print(f"  ‚Üí –ü–µ—Ä–µ–±–∏—Ä–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è x –≤—ñ–¥ 0 –¥–æ {min(max_iterations, q-1)}")
    power = 1
    for x in range(min(max_iterations, q)):
        if power == h:
            print(f"  ‚úì –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—ó {x}")
            return x
        if x % 10000 == 0 and x > 0:
            print(f"    –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ {x} –∑–Ω–∞—á–µ–Ω—å...")
        power = (power * g) % q
    return None


def discrete_log_attack(g, h, q):
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞—Ç–∞–∫–∏ –Ω–∞ ElGamal
    """
    # –î–ª—è –º–∞–ª–∏—Ö Q –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ brute force
    if q < 1000000:
        print("üìå –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –º–µ—Ç–æ–¥ brute force (Q < 1,000,000)")
        result = brute_force_attack(g, h, q)
        if result is not None:
            return result
    
    # –î–ª—è –±—ñ–ª—å—à–∏—Ö Q –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Baby-step Giant-step
    print("üìå –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º Baby-step Giant-step")
    return baby_step_giant_step(g, h, q)


def verify_result(g, x, h, q):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∫–ª—é—á–∞
    """
    result = pow(g, x, q)
    print("\n" + "="*60)
    print("–ü–ï–†–ï–í–Ü–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–£:")
    print(f"  G^X mod Q = {g}^{x} mod {q} = {result}")
    print(f"  H (–æ—á—ñ–∫—É–≤–∞–Ω–µ) = {h}")
    if result == h:
        print("  ‚úÖ –£–°–ü–Ü–•! –°–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        print("  ‚ùå –ü–û–ú–ò–õ–ö–ê! –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—î!")
    print("="*60)
    return result == h


def run_example(example_num, g, q, x_real):
    """
    –ó–∞–ø—É—Å–∫–∞—î –ø—Ä–∏–∫–ª–∞–¥ –∑ –∑–∞–¥–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    print("\n" + "="*60)
    print(f"–ü–†–ò–ö–õ–ê–î {example_num}")
    print("="*60)
    
    # Alice –≥–µ–Ω–µ—Ä—É—î –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á
    h = pow(g, x_real, q)
    print(f"üì§ Alice –≥–µ–Ω–µ—Ä—É—î –∫–ª—é—á—ñ:")
    print(f"   –°–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á X = {x_real} (—Ç—Ä–∏–º–∞—î –≤ —Ç–∞—î–º–Ω–∏—Ü—ñ)")
    print(f"   –û–±—á–∏—Å–ª—é—î H = G^X mod Q = {g}^{x_real} mod {q} = {h}")
    print(f"   –ü—É–±–ª—ñ–∫—É—î: G={g}, H={h}, Q={q}")
    
    print(f"\nüéØ –ê—Ç–∞–∫–∞: —à—É–∫–∞—î–º–æ X —Ç–∞–∫–µ, —â–æ {g}^X mod {q} = {h}")
    
    start_time = time.time()
    x_found = discrete_log_attack(g, h, q)
    elapsed_time = time.time() - start_time
    
    if x_found is not None:
        print(f"\nüí° –ó–ù–ê–ô–î–ï–ù–ò–ô –°–ï–ö–†–ï–¢–ù–ò–ô –ö–õ–Æ–ß: X = {x_found}")
        print(f"‚è±Ô∏è  –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {elapsed_time:.4f} —Å–µ–∫—É–Ω–¥")
        verify_result(g, x_found, h, q)
    else:
        print("\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á")


def interactive_mode():
    """
    –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    """
    print("\n" + "="*60)
    print("–Ü–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ò–ô –†–ï–ñ–ò–ú")
    print("="*60)
    print("–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –∫–ª—é—á–∞ ElGamal:")
    
    try:
        g = int(input("  G (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä): "))
        h = int(input("  H (–ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á, G^X mod Q): "))
        q = int(input("  Q (–ø—Ä–æ—Å—Ç–µ —á–∏—Å–ª–æ): "))
        
        # –ë–∞–∑–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
        if g <= 0 or h <= 0 or q <= 0:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º–∏")
            return
        
        if g >= q or h >= q:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞: G —Ç–∞ H –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –º–µ–Ω—à—ñ –∑–∞ Q")
            return
        
        print(f"\nüéØ –ê—Ç–∞–∫–∞: —à—É–∫–∞—î–º–æ X —Ç–∞–∫–µ, —â–æ {g}^X mod {q} = {h}")
        
        start_time = time.time()
        x_found = discrete_log_attack(g, h, q)
        elapsed_time = time.time() - start_time
        
        if x_found is not None:
            print(f"\nüí° –ó–ù–ê–ô–î–ï–ù–ò–ô –°–ï–ö–†–ï–¢–ù–ò–ô –ö–õ–Æ–ß: X = {x_found}")
            print(f"‚è±Ô∏è  –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {elapsed_time:.4f} —Å–µ–∫—É–Ω–¥")
            verify_result(g, x_found, h, q)
        else:
            print("\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á")
            
    except ValueError:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞")
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")


# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
if __name__ == "__main__":
    print("‚ïî" + "="*58 + "‚ïó")
    print("‚ïë" + " "*10 + "–ê–¢–ê–ö–ê –ù–ê –®–ò–§–†–£–í–ê–ù–ù–Ø ElGamal" + " "*20 + "‚ïë")
    print("‚ïë" + " "*10 + "Discrete Logarithm Attack" + " "*23 + "‚ïë")
    print("‚ïö" + "="*58 + "‚ïù")
    
    while True:
        print("\n" + "-"*60)
        print("–ú–ï–ù–Æ:")
        print("  1 - –ü—Ä–∏–∫–ª–∞–¥ 1 (–º–∞–ª—ñ –∑–Ω–∞—á–µ–Ω–Ω—è, Q=23)")
        print("  2 - –ü—Ä–∏–∫–ª–∞–¥ 2 (—Å–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è, Q=1009)")
        print("  3 - –ü—Ä–∏–∫–ª–∞–¥ 3 (–≤–µ–ª–∏–∫—ñ –∑–Ω–∞—á–µ–Ω–Ω—è, Q=10007)")
        print("  4 - –í–≤–µ—Å—Ç–∏ –≤–ª–∞—Å–Ω—ñ –¥–∞–Ω—ñ")
        print("  5 - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ –ø—Ä–∏–∫–ª–∞–¥–∏")
        print("  0 - –í–∏—Ö—ñ–¥")
        print("-"*60)
        
        choice = input("–í–∞—à –≤–∏–±—ñ—Ä: ").strip()
        
        if choice == "1":
            run_example(1, g=5, q=23, x_real=7)
        
        elif choice == "2":
            run_example(2, g=2, q=1009, x_real=123)
        
        elif choice == "3":
            run_example(3, g=3, q=10007, x_real=456)
        
        elif choice == "4":
            interactive_mode()
        
        elif choice == "5":
            run_example(1, g=5, q=23, x_real=7)
            run_example(2, g=2, q=1009, x_real=123)
            run_example(3, g=3, q=10007, x_real=456)
        
        elif choice == "0":
            print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
        print("\n" * 2)  # –û—á–∏—â–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É
