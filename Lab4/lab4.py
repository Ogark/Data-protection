import hashlib
import time

def generate_hash(pin):
    """
    –ì–µ–Ω–µ—Ä—É—î MD5 —Ö–µ—à –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ PIN-–∫–æ–¥—É
    
    Args:
        pin: PIN-–∫–æ–¥ —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞
    
    Returns:
        MD5 —Ö–µ—à —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞
    """
    return hashlib.md5(pin.encode()).hexdigest()


def crack_pin_hash(hash_string):
    """
    –ó–ª–∞–º—É—î MD5 —Ö–µ—à 5-–∑–Ω–∞—á–Ω–æ–≥–æ PIN-–∫–æ–¥—É
    
    Args:
        hash_string: MD5 —Ö–µ—à PIN-–∫–æ–¥—É —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞
    
    Returns:
        PIN-–∫–æ–¥ —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞ –∞–±–æ None
    """
    print("üîç –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–±—ñ—Ä PIN-–∫–æ–¥—ñ–≤...")
    start_time = time.time()
    
    for pin in range(100000):
        pin_str = f"{pin:05d}"
        pin_hash = hashlib.md5(pin_str.encode()).hexdigest()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∫–æ–∂–Ω—ñ 10000 —Å–ø—Ä–æ–±
        if pin % 10000 == 0:
            print(f"   –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ {pin:05d} –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤...")
        
        if pin_hash == hash_string:
            end_time = time.time()
            elapsed = end_time - start_time
            print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞ {elapsed:.2f} —Å–µ–∫—É–Ω–¥!")
            print(f"   –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ {pin + 1} –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤")
            return pin_str
    
    return None


def validate_pin(pin):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î PIN-–∫–æ–¥ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º (5 —Ü–∏—Ñ—Ä)
    
    Args:
        pin: PIN-–∫–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    
    Returns:
        True —è–∫—â–æ –≤–∞–ª—ñ–¥–Ω–∏–π, False —ñ–Ω–∞–∫—à–µ
    """
    return len(pin) == 5 and pin.isdigit()


def validate_hash(hash_string):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —Ö–µ—à –∫–æ—Ä–µ–∫—Ç–Ω–∏–º MD5 (32 —Å–∏–º–≤–æ–ª–∏, hex)
    
    Args:
        hash_string: —Ö–µ—à –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    
    Returns:
        True —è–∫—â–æ –≤–∞–ª—ñ–¥–Ω–∏–π, False —ñ–Ω–∞–∫—à–µ
    """
    if len(hash_string) != 32:
        return False
    try:
        int(hash_string, 16)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ hex-—Ä—è–¥–æ–∫
        return True
    except ValueError:
        return False


def print_menu():
    """–í–∏–≤–æ–¥–∏—Ç—å –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    print("\n" + "="*50)
    print("üîê –ü–†–û–ì–†–ê–ú–ê –î–õ–Ø –†–û–ë–û–¢–ò –ó MD5 –•–ï–®–ê–ú–ò PIN-–ö–û–î–Ü–í")
    print("="*50)
    print("1. üîí –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ö–µ—à –∑ PIN-–∫–æ–¥—É")
    print("2. üîì –ó–ª–∞–º–∞—Ç–∏ —Ö–µ—à (–æ—Ç—Ä–∏–º–∞—Ç–∏ PIN-–∫–æ–¥)")
    print("3. ‚ùå –í–∏–π—Ç–∏")
    print("="*50)


def option_generate_hash():
    """–û–ø—Ü—ñ—è 1: –ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è —Ö–µ—à—É"""
    print("\nüìù –ì–ï–ù–ï–†–£–í–ê–ù–ù–Ø MD5 –•–ï–®–£")
    print("-" * 50)
    
    pin = input("–í–≤–µ–¥—ñ—Ç—å 5-–∑–Ω–∞—á–Ω–∏–π PIN-–∫–æ–¥: ").strip()
    
    if not validate_pin(pin):
        print("‚ùå –ü–æ–º–∏–ª–∫–∞! PIN-–∫–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ 5 —Ü–∏—Ñ—Ä.")
        return
    
    hash_result = generate_hash(pin)
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"   PIN-–∫–æ–¥: {pin}")
    print(f"   MD5 —Ö–µ—à: {hash_result}")
    print(f"\nüí° –¶–µ–π —Ö–µ—à –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–ª–æ–º—É!")


def option_crack_hash():
    """–û–ø—Ü—ñ—è 2: –ó–ª–æ–º —Ö–µ—à—É"""
    print("\nüîì –ó–õ–û–ú MD5 –•–ï–®–£")
    print("-" * 50)
    
    hash_input = input("–í–≤–µ–¥—ñ—Ç—å MD5 —Ö–µ—à –¥–ª—è –∑–ª–æ–º—É: ").strip().lower()
    
    if not validate_hash(hash_input):
        print("‚ùå –ü–æ–º–∏–ª–∫–∞! –•–µ—à –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ 32-—Å–∏–º–≤–æ–ª—å–Ω–∏–º hex-—Ä—è–¥–∫–æ–º.")
        return
    
    print()
    result = crack_pin_hash(hash_input)
    
    if result:
        print(f"\nüéâ –£–°–ü–Ü–•! –ó–Ω–∞–π–¥–µ–Ω–æ PIN-–∫–æ–¥: {result}")
        print(f"\nüìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞:")
        print(f"   –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ö–µ—à: {hash_input}")
        print(f"   –•–µ—à –≤—ñ–¥ {result}:   {generate_hash(result)}")
    else:
        print("\n‚ùå PIN-–∫–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ, —Ü–µ –Ω–µ —Ö–µ—à 5-–∑–Ω–∞—á–Ω–æ–≥–æ PIN-–∫–æ–¥—É.")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
    print("üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!")
    
    while True:
        print_menu()
        choice = input("\n–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-3): ").strip()
        
        if choice == "1":
            option_generate_hash()
        elif choice == "2":
            option_crack_hash()
        elif choice == "3":
            print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è! –ë—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ –∑ –ø–∞—Ä–æ–ª—è–º–∏!")
            break
        else:
            print("\n‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å 1, 2 –∞–±–æ 3.")
        
        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —ñ—Ç–µ—Ä–∞—Ü—ñ—î—é
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")


if __name__ == "__main__":
    main()
