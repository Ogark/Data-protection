def decode_qr(qrcode):
    """
    Декодує QR-код версії 1 (21x21) з маскою 0 та byte mode
    
    Args:
        qrcode: 2D масив з 0 (білий) та 1 (чорний)
    
    Returns:
        Декодоване повідомлення
    """
    
    # Координати для читання QR-коду (починаємо з нижнього правого кута)
    def get_reading_order():
        """Генерує послідовність координат для читання QR-коду"""
        coords = []
        
        # Читаємо справа наліво парами колонок
        col = 20
        going_up = True
        
        while col >= 0:
            # Пропускаємо вертикальну лінію синхронізації (колонка 6)
            if col == 6:
                col -= 1
                continue
            
            # Читаємо дві колонки
            for _ in range(21):
                if going_up:
                    row = 20 - _
                else:
                    row = _
                
                # Додаємо дві клітинки (права, потім ліва)
                coords.append((row, col))
                coords.append((row, col - 1))
            
            # Змінюємо напрямок і переходимо до наступної пари колонок
            going_up = not going_up
            col -= 2
        
        return coords
    
    # Зони, які потрібно пропустити (позиціонування, формат, синхронізація)
    def should_skip(row, col):
        """Перевіряє, чи потрібно пропустити дану клітинку"""
        # Верхній лівий квадрат позиціонування (0-8, 0-8)
        if row <= 8 and col <= 8:
            return True
        
        # Верхній правий квадрат позиціонування (0-8, 13-20)
        if row <= 8 and col >= 13:
            return True
        
        # Нижній лівий квадрат позиціонування (13-20, 0-8)
        if row >= 13 and col <= 8:
            return True
        
        # Темна клітинка (8, 13)
        if row == 8 and col == 13:
            return True
        
        return False
    
    # Отримуємо послідовність читання
    reading_order = get_reading_order()
    
    # Будуємо бітову послідовність
    bits = []
    
    for row, col in reading_order:
        # Пропускаємо зони позиціонування
        if should_skip(row, col):
            continue
        
        # Отримуємо значення пікселя
        pixel = qrcode[row][col]
        
        # Застосовуємо маску 0: (row + col) % 2 == 0
        if (row + col) % 2 == 0:
            # Інвертуємо: 1->0, 0->1
            pixel = 1 - pixel
        
        bits.append(str(pixel))
        
        # Зупиняємось на 76 бітах (для версії 1)
        if len(bits) >= 76:
            break
    
    # Перетворюємо список бітів у рядок
    bit_string = ''.join(bits)
    
    # Пропускаємо перші 4 біти (режим)
    # Наступні 8 бітів - довжина повідомлення
    length_bits = bit_string[4:12]
    message_length = int(length_bits, 2)
    
    # Декодуємо повідомлення
    message = ""
    start_bit = 12
    
    for i in range(message_length):
        # Беремо 8 бітів для кожного символу
        char_bits = bit_string[start_bit + i*8 : start_bit + (i+1)*8]
        # Конвертуємо в ASCII
        ascii_value = int(char_bits, 2)
        message += chr(ascii_value)
    
    return message


# Тестовий приклад
if __name__ == "__main__":
    qrcode = [
        [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],
        [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1],
        [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
        [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1],
        [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
        [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0],
        [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
        [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1],
        [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0],
        [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1],
        [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],
        [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1]
    ]
    
    result = decode_qr(qrcode)
    print(f"Decoded message: {result}")  # Повинно вивести "Hello"
